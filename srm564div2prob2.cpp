#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

struct cc{string s; long long c;};

bool operator< (const cc& a, const cc& b){return a.c<b.c;}

class AlternateColors {
public:
	string getColor(long long r, long long g, long long b, long long k) {
		vector<cc> vc,vcs;
		cc ccr,ccg,ccb;
		ccr.s="RED";ccr.c=r;
		ccg.s="GREEN";ccg.c=g;
		ccb.s="BLUE";ccb.c=b;
		vc.push_back(ccr);
		vc.push_back(ccg);
		vc.push_back(ccb);
		vcs=vc;
		stable_sort(vcs.begin(),vcs.end());
		long long re;
		if(k<=vcs[0].c*3){
			re=k%3-1;
			if(re<0) re+=3;
			return vc[re].s;
		}
		else if(k<=(vcs[0].c+vcs[1].c*2)){
			re=k-vcs[0].c*3;
			re=re%2-1;
			if(re<0) re+=2;
			vector<int> rem;
			for(int i=0;i<3;i++){
				if(vcs[0].s!=vc[i].s){
					rem.push_back(i);
				}
			}
			return vc[rem[re]].s;
		}
		else return vcs[2].s;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, long long p2, long long p3, bool hasAnswer, string p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	AlternateColors *obj;
	string answer;
	obj = new AlternateColors();
	clock_t startTime = clock();
	answer = obj->getColor(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p4 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	long long p1;
	long long p2;
	long long p3;
	string p4;
	
	{
	// ----- test 0 -----
	p0 = 39ll;
	p1 = 4ll;
	p2 = 29ll;
	p3 = 7ll;
	p4 = "RED";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3ll;
	p1 = 4ll;
	p2 = 5ll;
	p3 = 4ll;
	p4 = "RED";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 7ll;
	p1 = 7ll;
	p2 = 1ll;
	p3 = 7ll;
	p4 = "GREEN";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1000000000000ll;
	p1 = 1ll;
	p2 = 1ll;
	p3 = 1000000000002ll;
	p4 = "RED";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 653ll;
	p1 = 32ll;
	p2 = 1230ll;
	p3 = 556ll;
	p4 = "BLUE";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Bob is playing with his ball destroyer robot. Initially, Bob has r red balls, g green balls and b blue balls. The robot will repeat the following 3-step program until there are no balls left:
// 
// If there is at least one red ball available, destroy one red ball.
// If there is at least one green ball available, destroy one green ball.
// If there is at least one blue ball available, destroy one blue ball.
// 
// You are given the long longs r, g and b. You are also given a long long k. Find the color of the k-th ball (1-index based) that will be destroyed.
// If the color of the k-th ball to be destroyed is red, return "RED" (quotes for clarity, returned values are case-sensitive).
// If the color is green, return "GREEN".
// If the color is blue, return "BLUE".
// 
// 
// DEFINITION
// Class:AlternateColors
// Method:getColor
// Parameters:long long, long long, long long, long long
// Returns:string
// Method signature:string getColor(long long r, long long g, long long b, long long k)
// 
// 
// CONSTRAINTS
// -r, g and b  will each be between 1 and 1000000000000 (10^12), inclusive.
// -k will be between 1 and r+g+b, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 1
// 1
// 1
// 3
// 
// Returns: "BLUE"
// 
// The order in which the balls are destroyed is: Red, green and blue. The third ball was blue.
// 
// 1)
// 3
// 4
// 5
// 4
// 
// Returns: "RED"
// 
// The order in which the balls are destroyed is:  Red, green, blue, red, green, blue, red, green, blue, green, blue and blue.
// 
// 2)
// 7
// 7
// 1
// 7
// 
// Returns: "GREEN"
// 
// 
// 
// 3)
// 1000000000000
// 1
// 1
// 1000000000002
// 
// Returns: "RED"
// 
// Once the only green and blue balls are destroyed, all of the remaining balls will be red.
// 
// 4)
// 653
// 32
// 1230
// 556
// 
// Returns: "BLUE"
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
